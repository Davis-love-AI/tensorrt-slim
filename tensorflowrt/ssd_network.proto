/* ============================================================================
# [2017] - Robik AI Ltd - Paul Balanca
# All Rights Reserved.

# NOTICE: All information contained herein is, and remains
# the property of Robik AI Ltd, and its suppliers
# if any.  The intellectual and technical concepts contained
# herein are proprietary to Robik AI Ltd
# and its suppliers and may be covered by U.S., European and Foreign Patents,
# patents in process, and are protected by trade secret or copyright law.
# Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained
# from Robik AI Ltd.
# =========================================================================== */
syntax = "proto2";

package tfrt_pb;
import "network.proto";

message box_scaling {
    optional float y = 1 [default = 1.];
    optional float x = 2 [default = 1.];
    optional float h = 3 [default = 1.];
    optional float w = 4 [default = 1.];
}
/** SSD anchors.
 */
message ssd_anchor2d {
    // Anchor size.
    optional float size = 1 [default = 0.];
    // Scales associated with this anchor.
    repeated float scales = 2;
}
/** SSD feature layer.
 */
message ssd_feature {
    // Fullnames of the different output tensors.
    message outputs_name {
        optional string predictions2d = 1;
        optional string boxes2d = 2;
        optional string predictions3d = 3;
        optional string boxes3d = 4;
    }
    // Name of feature (and full-scoped name).
    optional string name = 1;
    optional string fullname = 2;
    // Feature shape.
    optional dimsCHW shape = 3;
    // Anchors associated with this feature.
    repeated ssd_anchor2d anchors2d = 4;
    // Prior scaling.
    optional box_scaling prior_scaling = 5;
    // Outputs from this feature.
    optional outputs_name outputs = 6;
}

/** SSD network description.
 */
message ssd_network {
    // Basic underlying network.
    optional network network = 1;
    // Feature layers.
    repeated ssd_feature features = 2;
    // Number of 2D / 3D / segmentation classes.
    optional int32 num_classes_2d = 3 [default = 0];
    optional int32 num_classes_3d = 4 [default = 0];
    optional int32 num_classes_seg = 5 [default = 0];
}
